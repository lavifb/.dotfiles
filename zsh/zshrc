#
# Executes commands at the start of an interactive session.
#
# Authors:
#	Lavi Blumberg <lavifb@gmail.com>
#

# zmodload zsh/zprof

# History config
HISTFILE=~/.histfile
HISTSIZE=10000
SAVEHIST=10000

# fix base-16 colors
~/.zscripts/base16-tomorrow-night.sh

######################
# PROMPT
autoload -Uz vcs_info

zstyle ':vcs_info:*' stagedstr '%F{2}●'
zstyle ':vcs_info:*' unstagedstr '%F{1}●'
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{136}%r'
zstyle ':vcs_info:*' enable git svn
precmd () {
    # check for untracked files in git
    if [[ -z $(git ls-files --other --exclude-standard 2> /dev/null) ]] {
        zstyle ':vcs_info:*' formats ' [%F{yellow}%b%c%u%f]'
    } else {
        zstyle ':vcs_info:*' formats ' [%F{yellow}%b%c%u%F{5}●%f]'
    }

    vcs_info
}

setopt prompt_subst
PROMPT='%B%F{yellow}%n%f:%F{blue}%1~%f%b${vcs_info_msg_0_} %(?/%F{white}/%F{red})∮ %f'

VIM_PROMPT="%F{green}[NORMAL]%f"


# Show when in vi NORMAL mode
function zle-line-init zle-keymap-select {
    zle reset-prompt
    zle -R
}

# Redraw prompt when window is resized
TRAPWINCH() {
    zle && { zle reset-prompt; zle -R }
}

function vi_mode_indicator {
    echo "${${KEYMAP/vicmd/$VIM_PROMPT}/(main|viins)/}"
}

zle -N zle-line-init
zle -N zle-keymap-select
export KEYTIMEOUT=1

RPROMPT='$(vi_mode_indicator)'
# END PROMPT
######################

# ZSH COMPLETIONS
#####################
#autoload -Uz compinit && compinit -i

# Options
setopt COMPLETE_IN_WORD    # Complete from both ends of a word.
setopt ALWAYS_TO_END       # Move cursor to the end of a completed word.
setopt PATH_DIRS           # Perform path search even on command names with slashes.
setopt AUTO_MENU           # Show completion menu on a successive tab press.
setopt AUTO_LIST           # Automatically list choices on ambiguous completion.
setopt AUTO_PARAM_SLASH    # If completed parameter is a directory, add a trailing slash.

# Case-insensitive (all), partial-word, and then substring completion.
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# Group matches and describe.
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes

# Don't complete unavailable commands.
zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'

# Cache completions
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path "${HOME}/.zcompcache"

# History
zstyle ':completion:*:history-words' stop yes
zstyle ':completion:*:history-words' remove-all-dups yes
zstyle ':completion:*:history-words' list false
zstyle ':completion:*:history-words' meanu yes

# END COMPLETIONS
####################

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

alias cask='brew cask'
alias rm='rm -i'

alias gcm='git commit -m'
alias gam='git commit -am'
alias gc='git commit'
alias gp='git push'
alias gpo='git push origin'
alias gll='git pull'
alias gr='git reset'
alias ghh='git reset HEAD --hard'
alias gs='git status'
alias gch='git checkout'
alias gmr='git merge'
alias gb='git branch'
alias gd='git diff'
alias glg='git log --graph --pretty=oneline --abbrev-commit'
alias gf='git fetch'

# fix nvim correct
alias nvim='nocorrect nvim'
alias vim='nocorrect nvim'

# use lldb without sandbox
alias lldb='/Applications/Xcode.app/Contents/Developer/usr/bin/lldb'

# bat instead of cat
alias cat='bat'

# vim shortcuts in shell
bindkey -v

bindkey '^P' up-history
bindkey '^N' down-history
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word
bindkey '^r' history-incremental-search-backward
bindkey '^a' beginning-of-line
bindkey '^e' end-of-line

# bind keys to get them to work
bindkey "^[[3~" delete-char
bindkey "^[[H"  beginning-of-line
bindkey "^[[1~" beginning-of-line # for tmux
bindkey "^[[F"  end-of-line
bindkey "^[[4~" end-of-line       # for tmux
bindkey "^[[5~" up-line-or-search
bindkey "^[[6~" down-line-or-search


# turn on colors for ls
export CLICOLOR=1

# put casks in ~/Applications
export HOMEBREW_CASK_OPTS="--appdir=~/Applications"

# brew completions
if type brew &>/dev/null; then
  FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH
fi

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# kube
alias k='kubectl'

# Novus aliases
alias a='sbt alpha-app/run < /dev/null'
alias ad='a -jvm-debug 5005'

### Added by Zplugin's installer
source '/Users/lblumberg/.zplugin/bin/zplugin.zsh'
autoload -Uz _zplugin
(( ${+_comps} )) && _comps[zplugin]=_zplugin
### End of Zplugin's installer chunk
######################
# ZPLUGIN

zplugin ice wait"0" blockf
zplugin light zsh-users/zsh-completions

#zplugin ice wait"0" blockf
#zplugin snippet "https://raw.githubusercontent.com/docker/compose/release/contrib/completion/zsh/_docker-compose"

zplugin ice wait"0" blockf
zplugin light nnao45/zsh-kubectl-completion

zplugin ice wait"0" atload"_zsh_autosuggest_start"
zplugin light zsh-users/zsh-autosuggestions

zplugin ice wait"0" atinit"zpcompinit; zpcdreplay"
zplugin light zdharma/fast-syntax-highlighting

# END ZPLUGIN
######################

# Novus python pipup
function pipup () {
  if [ $# -ne 1 ]; then
    echo "Need 1 parameter"
    echo "Usage: $0 [path-to-whl]"
  else
    /usr/local/bin/python3 -m twine upload -r pypicloud $1
  fi
}

# nvm
export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"
[ -s "/usr/local/opt/nvm/etc/bash_completion" ] && . "/usr/local/opt/nvm/etc/bash_completion"
